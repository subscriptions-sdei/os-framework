<?php
    /*
        * Categories Controller class
        * Functionality -  Manage the Categories Management
        * Developer - Gurpreet Singh Ahhluwalia
        * Created date - 12-Feb-2014
        * Modified date - 
    */
    class CategoriesController extends AppController {        
        var $name = 'Categories';                
		public $components = array('Paginator','Common');
		var $helpers = array('Common');
		
		
        function beforeFilter(){
            parent::beforeFilter();    
            
        }
		
		/*
            * listing function
            * Functionality -  Display the show listing on frontend, Default Shopping View
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 26-Feb-2014
            * Modified date - 
        */
		function listing($getCategoryName = null)
		{
			
			$this->getDressSizes();
			$this->getShoeSizes();
			$this->getBrandList();
			$this->getCategoryList();
			$catName = $catId = '';						
			if(!empty($getCategoryName)) {
				$categoryName = $this->Common->stringConvertUscoreToSpace($getCategoryName);
				$conditions = 'Category.parent_id >= "1" AND Category.status = "1" AND Category.category LIKE "%'.$categoryName.'%"';
				$getData = $this->Category->find('first',array('fields' => array('Category.id','Category.category'),'conditions' => array($conditions)));
				if(!empty($getData))
				{
					$catName = $getData['Category']['category'];
					$catId = $getData['Category']['id'];
				}
			}	
			$getPriceArray = $this->getPriceArray();			
            $getConditionArray = $this->getConditionArray();
			$getAvailabilityArray = $this->getAvailabilityArray();
			$this->set(compact('getPriceArray','getConditionArray','getAvailabilityArray'));
			$this->set('categoryName',$catName);			
			$this->set('defaultCategory',$catId);			
			$this->set('categorySearchShow','0');
			$this->set('brandSearchShow','1');
		}
		
		
		/*
            * changepageview function
            * Functionality -  toggle the page view 'Social and shopping'
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */
		function changepageview()
		{
			$this->layout = "ajax";
			$this->getDressSizes();
			$this->getShoeSizes();
			
            /* Category Search Functionality */
			$categoryList = array();			
			if(isset($this->request->data['category_list']) && !empty($this->request->data['category_list']))
			{	
				$categoryList = $this->request->data['category_list'];
			}
			/* Category Search Functionality */
            /* Brand Search Functionality */
			$brandList = array();			
			if(isset($this->request->data['brand_list']) && !empty($this->request->data['brand_list']))
			{
				$brandListArray = explode('@',$this->request->data['brand_list']);				
				$brandList = $this->setIDListArray($this->request->data['brand_list']);
			}
			/* Brand Search Functionality */
            
            
            /* Size Search Functionality */
			$sizeList = array();			
			if(isset($this->request->data['size_list']) && !empty($this->request->data['size_list']))
			{
				$sizeList = $this->setIDListArray($this->request->data['size_list']);
			}
			/* Size Search Functionality */
            
            
			/* Price Search Functionality */
			$priceList = array();			
			if(isset($this->request->data['price_list']) && !empty($this->request->data['price_list']))
			{
				$priceList = $this->setIDListArray($this->request->data['price_list']);
			}
			/* Price Search Functionality */
			
			
			/* User Search Functionality */
			$getUserIdDetail = array();			
			if(isset($this->request->data['user_list']) && !empty($this->request->data['user_list']))
			{
				$getUserIdDetail = $this->request->data['user_list'];
			}
			/* User Search Functionality */
			
			
			/*Search Page Functionality */
			$searchValue = array();			
			if(isset($this->request->data['search_list']) && !empty($this->request->data['search_list']))
			{
				$searchValue = $this->request->data['search_list'];
			}
			/*Search Page Functionality */
			
			$this->set(compact('brandList','categoryList','priceList','sizeList','getUserIdDetail','searchValue'));
			$this->set('pageView',$this->request->data['pageview']);
			
		}
		
		/*
            * setIDListArray function
            * Functionality -  Create Id's Array
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */	
		function setIDListArray($getIdList = null)
		{
			$listArray =  array();
			$listArr = explode('@',$getIdList);
			if(!empty($listArr)) {
				for($i =0 ; $i < (count($listArr)-1) ; $i++)
				{
					$listArray[] = $listArr[$i];
				}
			}
			return $listArray;
		}
        
        /*
            * getcategorysize function
            * Functionality -  Shopping View Element
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */
        
        function getcategorysize()
        {   
            $this->layout = "ajax";
            $this->loadModel('CategoryDressSize');            
            $this->loadModel('ShoeSize');            
            /* Category Search Functionality */			
            $sizeArray = $getParentDetail = array();			
            if(isset($this->request->data['category_list']) && !empty($this->request->data['category_list']))
			{	                
                $getParentDetail = $this->Category->find('first',array('conditions'=> array("Category.Id" => $this->request->data['category_list']),'fields'=>array('Category.id','Category.parent_id')));                
                if(!empty($getParentDetail))
                {
                    if($getParentDetail['Category']['parent_id'] == 32)
                    {
                        $sizeArray = $this->ShoeSize->find('list',array('fields'=>array('ShoeSize.size','ShoeSize.size'),'order'=>'ShoeSize.id ASC'));
                    }else
                    {
                        $getSize = $this->CategoryDressSize->find('all',array('conditions'=> array("CategoryDressSize.category_id" => $getParentDetail['Category']['parent_id']),'fields'=>array('DressSize.size'),'order'=>'DressSize.id ASC'));
                        foreach($getSize as $sizeArr)
                        {
                            $sizeArray[$sizeArr['DressSize']['size']] = $sizeArr['DressSize']['size'];
                        }
                    }
                }
			}
			/* Category Search Functionality */           
            $this->set(compact('sizeArray'));
        }
        
        
        
		/*
            * getShoppingView function
            * Functionality -  Shopping View Element
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */		
		function getShoppingView($getUserIdDetail = null,$searchValue = null,$categoryList = null,$brandList = null,$sizeList = null,$priceList = null,$ItemValue = null)
		{
			
			$this->loadModel('Item');            
            $sessionUserId = $this->Session->read('UserInfo.id');
            $this->set('sessionUserId',$sessionUserId);
			
			$getUserId = (isset($this->params->params['User']) && !empty($this->params->params['User'])) ? $this->params->params['User'] : $getUserIdDetail;
			$search = (isset($this->params->params['Search']) && !empty($this->params->params['Search'])) ? $this->params->params['Search'] : $searchValue;
			$categories = (isset($this->params->params['Category']) && !empty($this->params->params['Category'])) ? $this->params->params['Category'] : $categoryList;
			$brands = (isset($this->params->params['Brand']) && !empty($this->params->params['Brand'])) ? $this->params->params['Brand'] : $brandList;
			$sizes = (isset($this->params->params['Size']) && !empty($this->params->params['Size'])) ? $this->params->params['Size'] : $sizeList;
			$prices = (isset($this->params->params['Price']) && !empty($this->params->params['Price'])) ? $this->params->params['Price'] : $priceList;
			$itemValue = ($ItemValue == null) ? '' : $ItemValue;
			
			$conditions = $this->getSearchCondtion($getUserId,$search,$categories,$brands,$sizes,$prices,$itemValue); /* conditions */
			
			$this->Item->unbindModel(array('hasMany' => array('UserComment','UserLike')));			
			$this->Item->bindModel(
									array('hasOne' => array(
											'ItemImage' => array(
												'className' => 'ItemImage',
												'conditions' => array('ItemImage.set_as_cover'=> 1)
											)
										)
									)
								);      
			$itemData  = $this->Item->find('all',array('fields' => array('Item.id','Item.name','Item.unique_id','Item.description','Item.price','Item.old_price','Item.item_type','Item.dress_size','Item.shoe_size','Item.other_item_size','User.id','User.username','User.email','User.first_name','User.last_name','ItemImage.id','ItemImage.image'),'conditions' => array($conditions),'order'=>'Item.id DESC','limit'=>2));
			return $itemData; 
		}
		
		
		/*
            * getSocialView function
            * Functionality -  Social View Element
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */		
		function getSocialView($getUserIdDetail = null,$searchValue = null,$categoryList = null,$brandList = null,$sizeList = null,$priceList = null,$ItemValue = null)
		{
			$this->loadModel('Item');            
            $sessionUserId = $this->Session->read('UserInfo.id');
            $this->set('sessionUserId',$sessionUserId);
			
			$getUserId = (isset($this->params->params['User']) && !empty($this->params->params['User'])) ? $this->params->params['User'] : $getUserIdDetail;
			$search = (isset($this->params->params['Search']) && !empty($this->params->params['Search'])) ? $this->params->params['Search'] : $searchValue;
			$categories = (isset($this->params->params['Category']) && !empty($this->params->params['Category'])) ? $this->params->params['Category'] : $categoryList;
			$brands = (isset($this->params->params['Brand']) && !empty($this->params->params['Brand'])) ? $this->params->params['Brand'] : $brandList;
			$sizes = (isset($this->params->params['Size']) && !empty($this->params->params['Size'])) ? $this->params->params['Size'] : $sizeList;
			$prices = (isset($this->params->params['Price']) && !empty($this->params->params['Price'])) ? $this->params->params['Price'] : $priceList;
			$itemValue = ($ItemValue == null) ? '' : $ItemValue;
			
			$conditions = $this->getSearchCondtion($getUserId,$search,$categories,$brands,$sizes,$prices,$itemValue); /* conditions */
			
			$this->Item->bindModel(
                                        array('hasOne' => array(
                                                'ItemImage' => array(
                                                    'className' => 'ItemImage',
                                                    'conditions' => array('ItemImage.set_as_cover'=> 1)
                                                )
                                            )
                                        )
                                    );
            //Containable user model
			$this->Item->Behaviors->load('Containable');
			$this->Item->hasMany['UserComment']['limit'] = 2;
			$this->Item->contain(array('Category','Brand','ItemImage.image','UserLike'=>array('User'=>array('fields'=>array('User.id','first_name','last_name','username','image','created'))),'UserComment'=>array('User'=>array('fields'=>array('User.id','first_name','last_name','username','image','created')),'fields'=>array('UserComment.id','UserComment.user_id','UserComment.comment','UserComment.created')),'User'=>array('fields'=>array('User.id','first_name','last_name','username','image','created'))));
            
			$this->Item->hasMany['UserComment']['order'] = 'UserComment.id DESC';
           
            $itemData  = $this->Item->find('all',array('fields'=>array('Item.id','Item.unique_id','Item.name','Item.description','Item.price','Item.old_price','Item.brand_id','Item.category_id','Item.item_type','Item.dress_size','Item.shoe_size','Item.other_item_size','Item.new_with_lbl','created','Item.user_id'),'conditions' => array($conditions),'recursive'=>2,'order'=>'Item.id DESC','limit'=>2));            
		
			return $itemData; 
			
			           
		}
		
		/*
            * getViewMore function
            * Functionality -  View more functionality
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 19-Mar-2014
            * Modified date - 
        */
		
		function getViewMore()
		{
			
			$this->layout = "ajax";
			$this->getDressSizes();
			$this->getShoeSizes();
			
			
			$categoryList = array();	/* Category Search Functionality */
			if(isset($this->request->data['category_list']) && !empty($this->request->data['category_list']))
			{	
				$categoryList = $this->request->data['category_list'];
			} /* Category Search Functionality */
			$brandList = array(); /* Brand Search Functionality */
			if(isset($this->request->data['brand_list']) && !empty($this->request->data['brand_list']))
			{
				$brandListArray = explode('@',$this->request->data['brand_list']);				
				$brandList = $this->setIDListArray($this->request->data['brand_list']);
			}  /* Brand Search Functionality */
			$sizeList = array();		/* Size Search Functionality */
			if(isset($this->request->data['size_list']) && !empty($this->request->data['size_list']))
			{
				$sizeList = $this->setIDListArray($this->request->data['size_list']);
			}  /* Size Search Functionality */
			$priceList = array();	/* Price Search Functionality */
			if(isset($this->request->data['price_list']) && !empty($this->request->data['price_list']))
			{
				$priceList = $this->setIDListArray($this->request->data['price_list']);
			} /* Price Search Functionality */
			$getUserIdDetail = array();			  /* User Search Functionality */
			if(isset($this->request->data['user_list']) && !empty($this->request->data['user_list']))
			{
				$getUserIdDetail = $this->request->data['user_list'];
			} /* User Search Functionality */
			$searchValue = array(); /*Search Page Functionality */
			if(isset($this->request->data['search_list']) && !empty($this->request->data['search_list']))
			{
				$searchValue = $this->request->data['search_list'];
			}  /*Search Page Functionality */
			$ItemValue = array(); /*Item Functionality */
			if(isset($this->request->data['last_item_id']) && !empty($this->request->data['last_item_id']))
			{
				$ItemValue = $this->request->data['last_item_id'];
			}  /*Item Page Functionality */
			
			
			$getFunctionName = ($this->request->data['pageview'] == 'social') ? 'getSocialView' : 'getShoppingView';
			$itemData = $this->$getFunctionName($getUserIdDetail,$searchValue,$categoryList,$brandList,$sizeList,$priceList,$ItemValue);
			
			$this->set(compact('itemData'));
			$this->render('/Elements/front/ajax_'.$this->request->data['pageview'].'_view');			
		}
		
		
		/*
            * getSearchCondtion function
            * Functionality -  set the condtions to get the data
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 3-Mar-2014
            * Modified date - 
        */		 
		function getSearchCondtion($getUserIdList = null,$getSearchValue = null, $getCategoryIDList = null, $getBrandIDList = null, $getSizeIDList = null, $getPriceIDList = null, $itemValue = null)
		{
			$this->loadModel('Item');
			
			$conditions = "Item.status = '1'";	            
            
			if(!empty($getCategoryIDList)) /* Category Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}
				$conditions .="(";				
				$conditions .= "Category.id = '".$getCategoryIDList."'";
				$conditions .=")";
			}
            if(!empty($getBrandIDList)) /* Brand Search Condition */
			{
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}
                $conditions .="(";
				foreach($getBrandIDList as $getBrandIDList)
				{
					$conditions .= "Brand.id = '".$getBrandIDList."' OR ";
				}				
				$conditions = substr($conditions, 0, -4);
				$conditions .=")";
			}
            if(!empty($getSizeIDList)) /* Size Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}
				$conditions .="(";
				foreach($getSizeIDList as $getSizeIDList)
				{
					$conditions .= "Item.dress_size = '".$getSizeIDList."' OR ";
				}
				$conditions = substr($conditions, 0, -4);
				$conditions .=")";
			}
			
			if(!empty($getPriceIDList)) /* Price Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}
				$conditions .="(";
				foreach($getPriceIDList as $getPriceIDList)
				{
					
					$priceCondition = '';
					if($getPriceIDList == 1)
					{
						$priceCondition = 'BETWEEN 0 AND 25';
					}else if($getPriceIDList == 2)
					{
						$priceCondition = 'BETWEEN 26 AND 50';
					}else if($getPriceIDList == 3)
					{
						$priceCondition = 'BETWEEN 51 AND 100';
					}else if($getPriceIDList == 4)
					{
						$priceCondition = 'BETWEEN 101 AND 200';
					}else if($getPriceIDList == 5)
					{
						$priceCondition = ' >= 201';
					}
					$conditions .= "Item.price ".$priceCondition." OR ";
				}
				$conditions = substr($conditions, 0, -4);
				$conditions .=")";
			}
			if(!empty($getUserIdList)) /* User Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}				
				$conditions .= "User.id = '".$getUserIdList."' ";				
			}
			if(!empty($getSearchValue)) /* User Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}				
                $conditions .= "(Item.name LIKE '%".$getSearchValue."%' OR
                                    User.first_name LIKE '%".$getSearchValue."%' OR
                                    User.last_name LIKE '%".$getSearchValue."%' OR
                                    User.email LIKE '%".$getSearchValue."%' OR
                                    User.username LIKE '%".$getSearchValue."%' OR
                                    Item.description LIKE '%".$getSearchValue."%')";
			}
			if(!empty($itemValue)) /* User Search Condition */
			{	
				if($conditions != '')
				{
					$conditions .= ' AND ';
				}				
                $itemId = $this->Item->find('first',array('conditions'=>array('Item.unique_id'=>$itemValue),'fields'=>array('Item.id')));
				$conditions .= "Item.id < '".$itemId['Item']['id']."' ";
			}
			//echo $conditions;
			
			return $conditions;
		}
		
		/*
            * admin_index function
            * Functionality -  Categories Listing
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 12-Feb-2014
            * Modified date - 
        */
        function admin_index($parent_id = null)
        {            
            /* Active/Inactive/Delete functionality */
			if((isset($this->request->data["Category"]["setStatus"])))
			{
				if(!empty($this->request->data['Category']['status'])){
					$status = $this->request->data['Category']['status'];
				}else
				{
					$this->Session->setFlash("Please select the action.",'default',array('class'=>'alert alert-danger'));	
					$this->redirect(array('action' => 'index'));
					
				}
				$CheckedList = $this->request->data['checkboxes'];
				$model='Category';				
				$controller = $this->params['controller'];				
				$action = $this->params['action'];				
				$this->setStatus($status,$CheckedList,$model,$controller,$action); 			 
			}
			/* Active/Inactive/Delete functionality */	
			$value ="";
			$criteria="Category.parent_id >= '1'"; 
			if(!empty($this->request->data['Search'])){
				if(isset($this->request->data['Search']['keyword']) && !empty($this->request->data['Search']['keyword'])){		   
					$value = $this->request->data['Search']['keyword'];				  
				}	
				if($value !="") {
						$criteria .= " AND Category.category LIKE '%".$value."%'";						
				}
				/* Active & Inactive Search functionality */
				if(isset($this->request->data['Search']['show'])){
					$show = $this->request->data['Search']['show'];					
				}				
				if(isset($show) && $show =='0'){			
					$criteria .= " AND Category.status = '0'";			
				}else if(isset($show) && $show =='1'){
					$criteria .= " AND Category.status = '1'";
				}
				/* Active & Inactive Search functionality */				
			}			
			$this->Paginator->settings = array('conditions' => array($criteria),
				'limit' => 10,
				'fields' => array('Category.id',
								  'Category.category',
								  'Category.parent_id',
								  'Category.status',
								  'Category.created',
								  'ParentCategory.id',
								  'ParentCategory.category'
								  ),
				'order' => array(
					'Category.id' => 'DESC'
				)
			);
			$this->set('getData',$this->Paginator->paginate('Category'));
			$this->set('keyword', $value);
			$this->set('navcategory','class = "active"');			
			$this->set('breadcrumb','Categories');			
			
        }
		
        /*
            * admin_addedit function
            * Functionality -  Add & edit the Categories
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 12-Feb-2014
            * Modified date - 
        */
        function admin_addedit($id = null)
        {	
			
			$categorylist = $this->Category->find('list',array('fields' => array('Category.category'),'conditions' => 'Category.parent_id = 0','order' => 'category asc'));
			$this->set('categorylist',$categorylist);
			
			$redirectPath = '';
			if(isset($this->request->data["Category"]["parent_id"]))
			{
				$redirectPath = '/'.base64_encode($this->request->data["Category"]["parent_id"]);
			}
			
			
			
			if(empty($this->request->data)){
				$this->request->data = $this->Category->read(null, base64_decode($id));			
			}else
			if(isset($this->request->data) && !empty($this->request->data))
			{  
				$this->Category->set($this->request->data);	
				if($this->Category->validates()) 				
				{ 
					$this->request->data['Category']['id'] = base64_decode($this->request->data['Category']['id']);					
					$this->request->data['Category']['category'] = trim($this->request->data['Category']['category']);					
					
					$this->request->data['Category']['parent_id'] = ($this->request->data['Category']['parent_id'] == null) ? 0  : $this->request->data['Category']['parent_id'] ;
					
					
					if($this->Category->save($this->request->data))
					{ 	
						$this->Session->setFlash("Category has been saved sucessfully.",'default',array('class'=>'alert alert-success'));	
						$this->redirect(array('action' => 'index'.$redirectPath));
					}
				}    
			}
			$textAction = ($id == null) ? 'Add' : 'Update';			
			$this->set('navcategory','class = "active"');			
			$this->set('action',$textAction);			
			$this->set('breadcrumb','Categories/'.$textAction);
			
        }
		/*
            * admin_delete function
            * Functionality -  Add & edit the Categories
            * Developer - Gurpreet Singh Ahhluwalia
            * Created date - 12-Feb-2014
            * Modified date - 
        */       
		function admin_delete($id = null, $parentId = null)
        {
			$categorylist = $this->Category->find('list',array('fields' => array('Category.id'),'conditions' => 'Category.parent_id = "'.base64_decode($id).'"'));			
			/* sub categories deleted */
			foreach($categorylist as $categorylist)
			{
				$this->Category->id = base64_decode($id);
				$this->Category->delete();
			}
			/* sub categories deleted */			
			$this->Category->id = base64_decode($id);
			$this->Category->delete();
			$this->Session->setFlash("Category has been deleted sucessfully.",'default',array('class'=>'alert alert-success'));	
			$redirectPath = ($parentId != null) ? '/'.$parentId : '';			
			$this->redirect('index'.$redirectPath);
		}
		
        
    
    }

?>