<?php
    /*
        * Order Controller class
        * Functionality -  to mange functionalities related to order of items
    */
    class OrdersController extends AppController {        
        var $name = 'Orders';                
		
		public $components = array('Paginator','Common','Email','Paypal');
		var $helpers = array('Common');
		
		
        function beforeFilter(){
            parent::beforeFilter();    
            
        }
    /*
        * Function: index
        * Functionality -  to make payment for item
    */	
        
        function index($itemUniqueId = null){
            $this->loadModel('Item');
            $this->loadModel('Order');
			$this->loadModel('User');
            $this->loadModel('OrderDetail');
            if($itemUniqueId){
                $this->set('itemUniqueId',$itemUniqueId);
                $this->getStateList();
				
                $sessionUserId = $this->Session->read('UserInfo.id');
				$buyerDetail  = $this->User->find('first',array('conditions'=>array('User.id'=>$sessionUserId)));
                $this->Item->unBindModel(array('hasMany'=>array('UserComment','UserLike'),'belongsTo'=>array('Category','Brand')));
                $this->Item->bindModel(
                                        array('hasOne' => array(
                                                'ItemImage' => array(
                                                    'className' => 'ItemImage',
                                                    'conditions' => array('ItemImage.set_as_cover'=> 1)
                                                )
                                            )
                                        )
                                    );
                $fields  = array('Item.id','Item.name','Item.price','ItemImage.image','User.id','User.username','User.email','User.first_name');
                $itemData = $this->Item->find('first',array('conditions'=>array('Item.unique_id'=>$itemUniqueId),'fields'=>$fields));
                $this->set('itemData',$itemData); // pr($itemData);
                if(!empty($this->request->data)){
                    //pr($this->request->data); die;
                    if(isset($this->request->data['Order']) && !empty($this->request->data['Order']))
                    {                     
                        $paymentType = urlencode('Sale');				// or 'Sale'
                        $firstName = urlencode($this->request->data['OrderDetail']['billing_name']);
                        $lastName = ""; //urlencode($this->request->data['User']['lastname']);
                        $creditCardType = urlencode($this->request->data['Order']['card_type']);
                        $creditCardNumber = urlencode($this->request->data['Order']['cc_number']);
                        //$creditCardNumber = urlencode('4716796482327012');
                        
                        $expDateMonth = $this->request->data['Order']['exp_month'];
                        // Month must be padded with leading zero
                        $padDateMonth = urlencode(str_pad($expDateMonth, 2, '0', STR_PAD_LEFT));
                        
                        $expDateYear = urlencode($this->request->data['Order']['exp_year']);
                        $cvv2Number = urlencode($this->request->data['Order']['cvv']);
                        //$cvv2Number = urlencode('000');
                        $address1 = urlencode($this->request->data['OrderDetail']['billing_street_1']);
                        $address2 = urlencode($this->request->data['OrderDetail']['billing_street_2']);
                        $city = urlencode($this->request->data['OrderDetail']['billing_city']);
                        $state = urlencode($this->request->data['OrderDetail']['billing_state']);
                        $zip = urlencode($this->request->data['OrderDetail']['billing_zip']);
                        $country = urlencode('US');// US or other valid country code
                        $amount = urlencode($this->request->data['Order']['total_amt']);
                        //$amount = urlencode(1);
                        $currencyID = urlencode('USD'); // or other currency ('GBP', 'EUR', 'JPY', 'CAD', 'AUD')
                        
                        // Add request-specific fields to the request string.
                        $nvpStr =	"&PAYMENTACTION=$paymentType&AMT=$amount&CREDITCARDTYPE=$creditCardType&ACCT=$creditCardNumber".
                                "&EXPDATE=$padDateMonth$expDateYear&CVV2=$cvv2Number&FIRSTNAME=$firstName&LASTNAME=$lastName".
                                "&STREET=$address1&CITY=$city&STATE=$state&ZIP=$zip&COUNTRYCODE=$country&CURRENCYCODE=$currencyID";
                        
                        //pr($nvpStr);	// die;	
                                // Execute the API operation; see the PPHttpPost function above.
                        $httpParsedResponseAr = $this->Paypal->PPHttpPost('DoDirectPayment', $nvpStr);
                        
                   // echo "<pre>";	print_r($httpParsedResponseAr); die;
                        
                        if("SUCCESS" == strtoupper($httpParsedResponseAr["ACK"]) || "SUCCESSWITHWARNING" == strtoupper($httpParsedResponseAr["ACK"])) {
                        //if(1==1){
							$this->request->data['Order']['item_id'] = $itemData['Item']['id'];
                            $this->request->data['Order']['transaction_id'] = $httpParsedResponseAr['TRANSACTIONID'];
                        //    $this->request->data['PaymentDetail']['transaction_id'] = '5873573740579435898';
                             $flag = 1;
                        }else{
                            
                            $msg = str_replace("%20", " ",$httpParsedResponseAr['L_LONGMESSAGE0']);
                            $msg = str_replace("%2e", " ",$msg);
                            $this->Session->setFlash('<span style="color:red;">'.$msg.'</span>');
                            //$this->redirect(array('controller' => 'payment_details', 'action' => 'index'));
                            $this->Session->setFlash('Payment failed please check credit card information');
                            $this->redirect(array("controller" => "orders", "action" => "index",$itemUniqueId));
                        }
                    }else{
                        $flag=1;
                    }
                    //	die;
                    if($flag == 1){ 
                               
                                
                                $ccNumber = str_repeat('x', (strlen($this->request->data['Order']['cc_number']) - 4)) . substr($this->request->data['Order']['cc_number'],-4,4);
                                $this->request->data['Order']['cc_number'] = $ccNumber;                               
                                $this->request->data['Order']['user_id'] = $sessionUserId;
                        if($this->Order->save($this->request->data)){ 
                            $orderId = $this->Order->id;
                            if(isset($this->request->data['OrderDetail']) && !empty($this->request->data['OrderDetail'])){
                                /*-------------------------------for save payment deatail----------------------------*/
                                $this->request->data['OrderDetail']['order_id'] = $orderId;
                                
                                $this->OrderDetail->save($this->request->data);
                                 /*-------------------------------end save payment deatail----------------------------*/
                            }
                            //email to notify buyer
                            App::import('Model','Emailtemplate');
                            $this->Emailtemplate = new Emailtemplate;
                            $template = $this->Emailtemplate->getEmailTemplate('notify_buyer');
                            
                            $to = $buyerDetail['User']['email'];
                            $data=$template['Emailtemplate']['template'];
                            $data=str_replace('[NAME]',ucfirst($buyerDetail['User']['first_name']),$data);
                            $data=str_replace('[ITEM_NAME]',$itemData['Item']['name'],$data);
							$data=str_replace('[PRICE]','$'.$itemData['Item']['price'],$data);
							$data=str_replace('[TOTALAMT]',$this->request->data['Order']['total_amt'],$data);
							$data=str_replace('[ORDERDATE]',date('m-d-Y'),$data);
                            
                            $subject = ucwords(str_replace('_',' ',$template['Emailtemplate']['name']));				
                            $send_mail = $this->sendEmail($to,$subject,$data); 			
                             //email to notify buyer (End)
							 
							 //email to notify Seller
                            
                            $template1 = $this->Emailtemplate->getEmailTemplate('notify_seller');
                            
                            $to1 = $itemData['User']['email'];
                            $data1=$template1['Emailtemplate']['template'];
                            $data1=str_replace('[NAME]',ucfirst($itemData['User']['first_name']),$data1);
                            $data1=str_replace('[ITEM_NAME]',$itemData['Item']['name'],$data1);
							$data1=str_replace('[PRICE]','$'.$itemData['Item']['price'],$data1);
							$data1=str_replace('[BUYER_NAME]',ucfirst($buyerDetail['User']['first_name']),$data1);
							$data1=str_replace('[BUYER_ADDRESS_1]',$this->request->data['OrderDetail']['shipping_street_1'],$data1);
							$data1=str_replace('[BUYER_CITY_STATE]',$this->request->data['OrderDetail']['shipping_city'].' '.$this->request->data['OrderDetail']['shipping_state'],$data1);
                            $data1=str_replace('[BUYER_ZIP]',$this->request->data['OrderDetail']['shipping_zip'],$data1);
							$data1=str_replace('[BUYER_PHONE]',$this->request->data['OrderDetail']['shipping_phone'],$data1);
							$data1 =str_replace('[ORDERDATE]',date('m-d-Y'),$data1);
                            $subject1 = ucwords(str_replace('_',' ',$template1['Emailtemplate']['name']));				
                            $send_mail = $this->sendEmail($to1,$subject1,$data1); 			
                            // pr($data);
							//pr($data1); die; //email to notify Seller (End)
                            $this->Session->setFlash('Order proccesed successfully. we will contact you soon. ','default',array('class'=>'alert alert-success'));	
                            $this->redirect(array('controller'=>'orders','action'=>'my_orders',$this->request->data['Order']['user_id']));
                        }
                    }
                } 
            }else{
                $this->Session->setFlash("Some Error occured.",'default',array('class'=>'alert alert-error'));	
                $this->redirect($this->referer());
            }
            
           // pr($data); die;
        }
        function my_orders($buyerUserId = null){
            
        }
    }

?>